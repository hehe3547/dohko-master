// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.dohko.core.grpc";
option java_outer_classname = "RpcServiceProto";

option objc_class_prefix = "HLW";

package core;

service RpcService {
  rpc execute (RpcRequest) returns (RpcResponse) {}
}

message RpcValue {
	oneof kind {
	    double double_value = 1;
	    float float_value = 2;
	    string string_value = 3;
	    bool bool_value = 4;
	    int32 int_value = 5; 
	    int64 long_value = 6;
	    RpcDataMap dataMap = 7;
	    RpcDataList dataList = 8;
   } 
}

message RpcListValue {
    repeated RpcValue value = 1;
}

message RpcDataMap {
    repeated RpcValue key = 1;
    repeated RpcValue value = 2;
}

message RpcDataList {
    repeated RpcValue header = 1;
    repeated RpcListValue value = 2;
}

message RpcRequest {
	string service = 1;
	string traceID = 2;
	RpcDataMap dataMap = 3;
	RpcHolder holder = 4;
}

message RpcHolder {
    RpcDataMap dataMap = 1;
}

message RpcResponse {
	bool success = 1;
	string returnCode = 2;
	string returnMsg = 3;
	string traceID = 4;
	RpcDataMap dataMap = 5;
}